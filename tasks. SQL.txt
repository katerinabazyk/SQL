--1.Добавить новый учебный курс в таблице Course.
select *
from Course
go

INSERT INTO Course (CourseId, Code, Title, [Description], Amount, [Status])
VALUES (800, 'AS800', 'Тестирование API', 'Тестирование Web Services', 5500, 'D')
go


--2. Добавить описание новосозданного курса (п.1.) в таблице CourseContent (минимум 3 записи). Предварительно проанализируйте таблицы, посмотрите как на текущих данных выполнено наполнение таблиц.
select *
from CourseContent
go

INSERT INTO CourseContent (CourseId, Chapter, ContentType, Title, [Description])
VALUES (800, 1, 'UN', 'Что такое API', '')

INSERT INTO CourseContent (CourseId, Chapter, ContentType, Title, [Description])
VALUES (800, 2, 'UN', 'Способы интеграции систем', '')

INSERT INTO CourseContent (CourseId, Chapter, ContentType, Title, [Description])
VALUES (800, 3, 'UN', 'HTTP-протокол: SOAP и REST', '')

INSERT INTO CourseContent (CourseId, Chapter, ContentType, Title, [Description])
VALUES (800, 4, 'UN', '7 уровней OSI', '')
go


--3.Добавить 2 новых пользователя в таблицу UserData со статусом 'D' и параметром 0 и 1.
select *
from UserData
go 

INSERT INTO UserData (UserName, Password, FirstName, MiddleName, LastName, CreateDate, UpdateDate, [Status], Parameter)
SELECT  'user1', '098zxc', 'Екатерина', 'Васильевна', 'Базык', CURRENT_TIMESTAMP, '20200703 23:05:45', 'D', 0
UNION ALL
SELECT  'user2', '123mnb', 'Екатерина', 'Васильевна', 'Базык', CURRENT_TIMESTAMP,'20200704 10:12:36', 'D', 1
go


--4.Добавить еще 2 пользователя в таблицу UserData с другим допустимым статусом и параметром 0 и 1.
select *
from UserData
go 

INSERT INTO UserData (UserName, Password, FirstName, MiddleName, LastName, CreateDate, UpdateDate, [Status], Parameter)
SELECT  'user3', '345hjk', 'Пупкин', 'Иван', 'Степанович', CURRENT_TIMESTAMP, '20200615 13:04:11', 'A', 0
UNION ALL
SELECT  'user4', '657ert', 'Чувакова', 'Елена', 'Владимировна', CURRENT_TIMESTAMP,'20200702 17:56:04', 'A', 1
go


--Запросы--
--1.Найти документы в таблице Payment, где сумма (Amount)  больше равна 26024.92.
select *
from Payment p
where p. Amount >='26024.92'
go

-- 2.Найти документы в таблице Payment, где дата документа между 2010-02-11 и 2011-05-22, и валюта документов НЕ равна 980.
select *
from Payment p
where p.  Currency <>980
and Data_doc >= '2010-02-11' and Data_doc <= ' 2011-05-22'
go

--3.Найти документы в таблице Payment, где Дебет счета (DebAcc) может иметь  такие счета '260070001','260088791','260006443'.

select*
from Payment p
where p. DebAcc in ('260070001','260088791','260006443')
go

--4.Найти документы в таблице Payment, где Дебет счета (DebAcc) может иметь  такие счета '260070001','260088791','260006443'. При этом вывести сумму документа Amount умноженную на 3 и от этой суммы отнять 1000.
select *, Amount * 3 - 1000
from Payment p
where p. DebAcc in ('260070001','260088791','260006443')
go

--5.Вывести счета с таблицы Account, где "(" Status равен 'O' И дата открытия OpenDate равна 2016-01-21 ")" ИЛИ дата закрытия CloseDate явяется НЕ NULL. Здесь обратите внимание на скобки в условии.
select *
from Account a
where (a. Status = 'O'
and a. OpenDate = '2016-01-21')
or (a. CloseDate IS NOT NULL)
go

--6.Вывести счета с таблицы Account, где Status равен 'O' И "(" дата открытия OpenDate равна 2016-01-21 ИЛИ дата закрытия CloseDate явяется НЕ NULL ")". Здесь обратите внимание на скобки в условии.
select *
from Account a
where (a. Status = 'O')
and (a. OpenDate = '2016-01-21'
or a. CloseDate IS NOT NULL)
go

--7.Вывести пользователей с таблицы Customer и Salary, у которых ДР '1977-09-26', получал Бонус и дата ЗП между '2019-03-31' и '2019-09-30'.
select *
from Customer c left JOIN Salary s on c.Cust_Id = s.Cust_Id
where c.Birthday = '1977-09-26'
and Bonus is not NULL
and Date between '2019-03-31' AND '2019-09-30'
go

/*8.Вывести информацию о пользователях и его счетах с таблиц Customer и Account, где:
	- Клиенты нерезиденты
	- Счет начинается на 2650
	вторая часть выборки
	- Клиенты нерезиденты
	- Код валюты 980.
Подсказка: между запросами использовать UNION или UNION ALL, но что бы выводимые строки не дублировались (попрактикуйте с этим оператором соединения)
Поля для вывода такие: CustomerLogin, NameUser, Resident, Country, Gender, Account, Currency, [Status], OpenDate
Отсортировать по дате открытия счета в обратном порядке */

select CustomerLogin, NameUser, Resident, Country, Gender, Account, Currency, OpenDate
from Customer c inner JOIN Account a on c.Cust_Id = a.Cust_Id
where Resident  <>'R'
and Account like '2650%'
union 
select CustomerLogin, NameUser, Resident, Country, Gender, Account, Currency, OpenDate
from  Customer c inner JOIN Account a on c.Cust_Id = a.Cust_Id
where Resident  <>'R'
and Currency = 980
ORDER BY OpenDate DESC
go


/*9.Задача про "Алкоголика".
Найти платежи, назначение платежа которых имеет фрагмент слова "алког" (в любом сегменте назначения платежа).
Дебет DebAcc счета этих платежей использовать для поиска/связи счета в таблице счетов Account.
А с таблицы Account сделать связь на клиента-владельца с таблицы Customer.	
Вывести только поле NameUser.*/

SELECT DISTINCT C.NAMEUSER
FROM CUSTOMER C, ACCOUNT A
WHERE A.CUST_ID = C.CUST_ID
AND A.ACCOUNT IN (SELECT P.DEBACC
					FROM PAYMENT P
				   WHERE P.TXT LIKE '%АЛКОГ%')
GO
